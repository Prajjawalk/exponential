generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  actions               Action[]
  assignedActions       Action[]               @relation("AssignedActions")
  goals                 Goal[]
  integrations          Integration[]
  notes                 Note[]
  outcomes              Outcome[]
  posts                 Post[]
  projects              Project[]
  sessions              Session[]
  projectMemberships    ProjectMember[]
  teams                 TeamUser[]
  transcriptionSessions TranscriptionSession[]
  exercises             UserExercise[]
  verificationTokens    VerificationToken[]
  workflows             Workflow[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([userId])
}

model Action {
  id                     String                @id @default(cuid())
  name                   String
  description            String?
  dueDate                DateTime?
  status                 String                @default("ACTIVE")
  priority               String                @default("Quick")
  projectId              String?
  createdById            String
  teamId                 String?
  assignedToId           String?
  transcriptionSessionId String?
  createdBy              User                  @relation(fields: [createdById], references: [id])
  assignedTo             User?                 @relation("AssignedActions", fields: [assignedToId], references: [id])
  team                   Team?                 @relation(fields: [teamId], references: [id])
  project                Project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  transcriptionSession   TranscriptionSession? @relation(fields: [transcriptionSessionId], references: [id], onDelete: SetNull)
  syncs                  ActionSync[]

  @@index([projectId])
  @@index([createdById])
  @@index([teamId])
  @@index([assignedToId])
  @@index([transcriptionSessionId])
}

model Outcome {
  id          String    @id @default(cuid())
  description String
  dueDate     DateTime?
  userId      String?
  type        String?   @default("daily")
  projectId   String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Restrict)
  goals       Goal[]    @relation("GoalOutcomes")
  projects    Project[] @relation("ProjectOutcomes")

  @@index([userId])
  @@index([projectId])
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  status                String                 @default("ACTIVE")
  priority              String                 @default("NONE")
  progress              Float                  @default(0)
  createdAt             DateTime               @default(now())
  reviewDate            DateTime?
  nextActionDate        DateTime?
  createdById           String
  teamId                String?
  slug                  String                 @unique
  description           String?
  taskManagementTool    String?                @default("internal") // 'internal', 'monday', 'notion', etc.
  taskManagementConfig  Json?                  // Tool-specific configuration
  notionProjectId       String?                // ID of the associated Notion Projects database record
  actions               Action[]
  createdBy             User                   @relation(fields: [createdById], references: [id])
  team                  Team?                  @relation(fields: [teamId], references: [id])
  projectMembers        ProjectMember[]
  transcriptionSessions TranscriptionSession[]
  goals                 Goal[]                 @relation("GoalProjects")
  outcomes              Outcome[]              @relation("ProjectOutcomes")
  workflows             Workflow[]

  @@index([name])
  @@index([status])
  @@index([priority])
  @@index([teamId])
  @@index([taskManagementTool])
}

model Video {
  id            String    @id @default(uuid())
  slug          String?   @unique
  title         String?
  videoUrl      String    @unique
  transcription String?
  status        String
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  isSearchable  Boolean?  @default(false)
  description   String?
  summary       String?
}

model Week {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  days      Day[]
}

model Day {
  id        Int            @id @default(autoincrement())
  date      DateTime
  weekId    Int
  week      Week           @relation(fields: [weekId], references: [id])
  notes     Note[]
  exercises UserExercise[]

  @@index([weekId])
}

model Exercise {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  userExercises UserExercise[]
}

model UserExercise {
  id         Int      @id @default(autoincrement())
  userId     String
  exerciseId Int
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([exerciseId])
  @@index([dayId])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  dueDate      DateTime?
  lifeDomainId Int
  userId       String
  lifeDomain   LifeDomain @relation(fields: [lifeDomainId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  outcomes     Outcome[]  @relation("GoalOutcomes")
  projects     Project[]  @relation("GoalProjects")

  @@index([lifeDomainId])
  @@index([userId])
}

model LifeDomain {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  goals       Goal[]
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  title     String?
  dayId     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       Day      @relation(fields: [dayId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([dayId])
  @@index([userId])
  @@index([type])
}

model ProjectMember {
  id               String   @id @default(cuid())
  name             String
  role             String
  responsibilities String[]
  avatarUrl        String?
  projectId        String
  userId           String
  project          Project  @relation(fields: [projectId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Team {
  id          String        @id @default(cuid())
  name        String
  slug        String        @unique
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  members      TeamUser[]
  projects     Project[]
  actions      Action[]
  integrations Integration[]
  
  @@index([slug])
}

model TeamUser {
  id        String   @id @default(cuid())
  userId    String
  teamId    String
  role      String   @default("member") // owner, admin, member
  joinedAt  DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Differentiator {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model Audience {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model TranscriptionSession {
  id                  String       @id @default(cuid())
  sessionId           String       @unique
  transcription       String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userId              String?
  setupId             String?
  projectId           String?
  description         String?
  title               String?
  summary             String?      // JSON string containing Fireflies summary data
  sourceIntegrationId String?      // Track which integration created this transcription
  screenshots         Screenshot[]
  actions             Action[]     // Actions created from this transcription
  project             Project?     @relation(fields: [projectId], references: [id])
  user                User?        @relation(fields: [userId], references: [id])
  sourceIntegration   Integration? @relation(fields: [sourceIntegrationId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([projectId])
  @@index([sourceIntegrationId])
}

model Screenshot {
  id                     String               @id @default(cuid())
  url                    String
  timestamp              String
  transcriptionSessionId String
  createdAt              DateTime             @default(now())
  transcriptionSession   TranscriptionSession @relation(fields: [transcriptionSessionId], references: [id])
}

model Integration {
  id                    String                    @id @default(cuid())
  name                  String
  type                  String                    // 'API_KEY', 'OAUTH', 'WEBHOOK', etc.
  provider              String                    // 'fireflies', 'github', 'slack', 'notion', etc.
  status                String                    @default("ACTIVE") // 'ACTIVE', 'DISABLED', 'EXPIRED'
  description           String?
  lastSyncAt            DateTime?                 // Last time transcripts were synced from this integration
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  userId                String?
  teamId                String?
  user                  User?                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team                  Team?                     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  credentials           IntegrationCredential[]
  transcriptionSessions TranscriptionSession[]    // Transcriptions created by this integration
  workflows             Workflow[]                // Workflows using this integration

  @@index([userId])
  @@index([teamId])
  @@index([provider])
}

model IntegrationCredential {
  id            String      @id @default(cuid())
  key           String      // The actual API key or credential
  keyType       String      // 'API_KEY', 'ACCESS_TOKEN', 'REFRESH_TOKEN', 'SECRET'
  expiresAt     DateTime?   // For tokens that expire
  isEncrypted   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model Workflow {
  id            String        @id @default(cuid())
  name          String
  type          String        // 'NOTION_SYNC', 'SLACK_ACTIONS', etc.
  provider      String        // 'notion', 'slack', etc.
  status        String        @default("ACTIVE") // 'ACTIVE', 'DISABLED', 'ERROR'
  syncDirection String        // 'push', 'pull', 'bidirectional'
  syncFrequency String        // 'manual', 'hourly', 'daily', 'weekly'
  
  // Configuration specific to the workflow type
  config        Json          // JSON blob for flexible configuration (database ID, field mappings, etc.)
  
  // Relationships
  integrationId String
  userId        String
  projectId     String?       // Optional: associate with a specific project
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastRunAt     DateTime?     // When the workflow was last executed
  
  // Relations
  integration   Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  runs          WorkflowRun[]

  @@index([userId])
  @@index([integrationId])
  @@index([status])
  @@index([provider])
}

model WorkflowRun {
  id         String    @id @default(cuid())
  workflowId String
  status     String    // 'RUNNING', 'SUCCESS', 'FAILED'
  startedAt  DateTime  @default(now())
  completedAt DateTime?
  
  // Results and metadata
  itemsProcessed Int     @default(0)
  itemsCreated   Int     @default(0)
  itemsUpdated   Int     @default(0)
  itemsSkipped   Int     @default(0)
  errorMessage   String?
  metadata       Json?   // Additional data about the run
  
  // Relations
  workflow       Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model ActionSync {
  id         String   @id @default(cuid())
  actionId   String
  provider   String   // 'notion', 'monday', 'asana', etc.
  externalId String   // The ID in the external system (e.g., Notion page ID)
  syncedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("synced") // 'synced', 'failed', 'needs_update'
  
  // Relations
  action     Action   @relation(fields: [actionId], references: [id], onDelete: Cascade)
  
  @@unique([actionId, provider]) // One sync record per action per provider
  @@index([provider, externalId])
  @@index([provider])
  @@index([actionId])
}
