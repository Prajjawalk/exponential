generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String                   @id @default(cuid())
  name                  String?
  email                 String?                  @unique
  emailVerified         DateTime?
  image                 String?
  accounts              Account[]
  actions               Action[]
  assignedActions       Action[]                 @relation("AssignedActions")
  goals                 Goal[]
  integrations          Integration[]
  integrationMappings   IntegrationUserMapping[] // User mappings across integrations
  slackRegistrations    SlackRegistrationToken[] // Slack registration tokens used by this user
  slackMessageHistory   SlackMessageHistory[] // Slack messages sent by this user
  aiInteractionHistory  AiInteractionHistory[] // AI interactions by this user
  notes                 Note[]
  outcomes              Outcome[]
  posts                 Post[]
  projects              Project[]
  sessions              Session[]
  projectMemberships    ProjectMember[]
  teams                 TeamUser[]
  transcriptionSessions TranscriptionSession[]
  exercises             UserExercise[]
  verificationTokens    VerificationToken[]
  workflows             Workflow[]
  whatsappConversations WhatsAppConversation[] // WhatsApp conversations for this user

  // Integration permission relations
  permissionsGrantedTo    IntegrationPermission[] @relation("PermissionGrantedTo")
  permissionsGrantedBy    IntegrationPermission[] @relation("PermissionGrantedBy")
  permissionsRevokedBy    IntegrationPermission[] @relation("PermissionRevokedBy")
  slackChannelsConfigured SlackChannelConfig[] // Slack channels configured by this user
  
  // Notification relations
  notificationPreferences NotificationPreference?
  scheduledNotifications  ScheduledNotification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@index([userId])
}

model Action {
  id                     String                @id @default(cuid())
  name                   String
  description            String?
  dueDate                DateTime?
  status                 String                @default("ACTIVE")
  priority               String                @default("Quick")
  projectId              String?
  createdById            String
  teamId                 String?
  assignedToId           String?
  transcriptionSessionId String?
  createdBy              User                  @relation(fields: [createdById], references: [id])
  assignedTo             User?                 @relation("AssignedActions", fields: [assignedToId], references: [id])
  team                   Team?                 @relation(fields: [teamId], references: [id])
  project                Project?              @relation(fields: [projectId], references: [id], onDelete: Cascade)
  transcriptionSession   TranscriptionSession? @relation(fields: [transcriptionSessionId], references: [id], onDelete: SetNull)
  syncs                  ActionSync[]

  @@index([projectId])
  @@index([createdById])
  @@index([teamId])
  @@index([assignedToId])
  @@index([transcriptionSessionId])
}

model Outcome {
  id          String    @id @default(cuid())
  description String
  dueDate     DateTime?
  userId      String?
  type        String?   @default("daily")
  projectId   String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Restrict)
  goals       Goal[]    @relation("GoalOutcomes")
  projects    Project[] @relation("ProjectOutcomes")

  @@index([userId])
  @@index([projectId])
}

model Project {
  id                    String                 @id @default(cuid())
  name                  String
  status                String                 @default("ACTIVE")
  priority              String                 @default("NONE")
  progress              Float                  @default(0)
  createdAt             DateTime               @default(now())
  reviewDate            DateTime?
  nextActionDate        DateTime?
  createdById           String
  teamId                String?
  slug                  String                 @unique
  description           String?
  taskManagementTool    String?                @default("internal") // 'internal', 'monday', 'notion', etc.
  taskManagementConfig  Json? // Tool-specific configuration
  notionProjectId       String? // ID of the associated Notion Projects database record
  actions               Action[]
  createdBy             User                   @relation(fields: [createdById], references: [id])
  team                  Team?                  @relation(fields: [teamId], references: [id])
  projectMembers        ProjectMember[]
  transcriptionSessions TranscriptionSession[]
  goals                 Goal[]                 @relation("GoalProjects")
  outcomes              Outcome[]              @relation("ProjectOutcomes")
  workflows             Workflow[]
  slackConfig           SlackChannelConfig?
  aiInteractionHistory  AiInteractionHistory[] // AI interactions related to this project

  @@index([name])
  @@index([status])
  @@index([priority])
  @@index([teamId])
  @@index([taskManagementTool])
}

model Video {
  id            String    @id @default(uuid())
  slug          String?   @unique
  title         String?
  videoUrl      String    @unique
  transcription String?
  status        String
  createdAt     DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  isSearchable  Boolean?  @default(false)
  description   String?
  summary       String?
}

model Week {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  days      Day[]
}

model Day {
  id        Int            @id @default(autoincrement())
  date      DateTime
  weekId    Int
  week      Week           @relation(fields: [weekId], references: [id])
  notes     Note[]
  exercises UserExercise[]

  @@index([weekId])
}

model Exercise {
  id            Int            @id @default(autoincrement())
  title         String
  description   String?
  userExercises UserExercise[]
}

model UserExercise {
  id         Int      @id @default(autoincrement())
  userId     String
  exerciseId Int
  dayId      Int
  day        Day      @relation(fields: [dayId], references: [id])
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([exerciseId])
  @@index([dayId])
}

model Goal {
  id           Int        @id @default(autoincrement())
  title        String
  description  String?
  dueDate      DateTime?
  lifeDomainId Int
  userId       String
  lifeDomain   LifeDomain @relation(fields: [lifeDomainId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  outcomes     Outcome[]  @relation("GoalOutcomes")
  projects     Project[]  @relation("GoalProjects")

  @@index([lifeDomainId])
  @@index([userId])
}

model LifeDomain {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  goals       Goal[]
}

model Note {
  id        Int      @id @default(autoincrement())
  content   String
  type      String
  title     String?
  dayId     Int
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  day       Day      @relation(fields: [dayId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([dayId])
  @@index([userId])
  @@index([type])
}

model ProjectMember {
  id               String   @id @default(cuid())
  name             String
  role             String
  responsibilities String[]
  avatarUrl        String?
  projectId        String
  userId           String
  project          Project  @relation(fields: [projectId], references: [id])
  user             User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members                 TeamUser[]
  projects                Project[]
  actions                 Action[]
  integrations            Integration[]
  slackConfig             SlackChannelConfig?
  slackRegistrationTokens SlackRegistrationToken[] // Registration tokens for this team
  integrationPermissions  IntegrationPermission[] // Permissions granted to this team

  @@index([slug])
}

model TeamUser {
  id       String   @id @default(cuid())
  userId   String
  teamId   String
  role     String   @default("member") // owner, admin, member
  joinedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Differentiator {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model Audience {
  id          String   @id @default(cuid())
  value       String   @unique
  label       String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String   @default("")
}

model TranscriptionSession {
  id                  String       @id @default(cuid())
  sessionId           String       @unique
  transcription       String?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  userId              String?
  setupId             String?
  projectId           String?
  description         String?
  title               String?
  summary             String? // JSON string containing Fireflies summary data
  sourceIntegrationId String? // Track which integration created this transcription
  processedAt         DateTime? // Track when actions were processed
  slackNotificationAt DateTime? // Track when Slack was notified
  archivedAt          DateTime? // Track when transcription was archived
  screenshots         Screenshot[]
  actions             Action[] // Actions created from this transcription
  project             Project?     @relation(fields: [projectId], references: [id])
  user                User?        @relation(fields: [userId], references: [id])
  sourceIntegration   Integration? @relation(fields: [sourceIntegrationId], references: [id], onDelete: SetNull)

  @@index([sessionId])
  @@index([userId])
  @@index([projectId])
  @@index([sourceIntegrationId])
}

model Screenshot {
  id                     String               @id @default(cuid())
  url                    String
  timestamp              String
  transcriptionSessionId String
  createdAt              DateTime             @default(now())
  transcriptionSession   TranscriptionSession @relation(fields: [transcriptionSessionId], references: [id])
}

model Integration {
  id                      String                   @id @default(cuid())
  name                    String
  type                    String // 'API_KEY', 'OAUTH', 'WEBHOOK', etc.
  provider                String // 'fireflies', 'github', 'slack', 'notion', etc.
  status                  String                   @default("ACTIVE") // 'ACTIVE', 'DISABLED', 'EXPIRED'
  description             String?
  lastSyncAt              DateTime? // Last time transcripts were synced from this integration
  allowTeamMemberAccess   Boolean                  @default(false) // Auto-share with team members
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  userId                  String?
  teamId                  String?
  user                    User?                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  team                    Team?                    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  credentials             IntegrationCredential[]
  userMappings            IntegrationUserMapping[] // User mappings for this integration
  transcriptionSessions   TranscriptionSession[] // Transcriptions created by this integration
  workflows               Workflow[] // Workflows using this integration
  slackChannelConfigs     SlackChannelConfig[] // Slack channel configurations using this integration
  slackRegistrationTokens SlackRegistrationToken[] // Registration tokens for this integration
  permissions             IntegrationPermission[] // Permissions granted for this integration
  whatsappConfig          WhatsAppConfig? // WhatsApp configuration for this integration
  
  // Notification relations
  notificationPreferences NotificationPreference[]
  scheduledNotifications  ScheduledNotification[]

  @@index([userId])
  @@index([teamId])
  @@index([provider])
}

model IntegrationCredential {
  id            String      @id @default(cuid())
  key           String // The actual API key or credential
  keyType       String // 'API_KEY', 'ACCESS_TOKEN', 'REFRESH_TOKEN', 'SECRET'
  expiresAt     DateTime? // For tokens that expire
  isEncrypted   Boolean     @default(true)
  createdAt     DateTime    @default(now())
  integrationId String
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)

  @@index([integrationId])
}

model IntegrationUserMapping {
  id             String   @id @default(cuid())
  integrationId  String
  externalUserId String // Slack user ID (U1234567890), GitHub user ID, etc.
  userId         String // Your system user ID  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([integrationId, externalUserId])
  @@index([integrationId])
  @@index([userId])
  @@index([externalUserId])
}

model Workflow {
  id            String @id @default(cuid())
  name          String
  type          String // 'NOTION_SYNC', 'SLACK_ACTIONS', etc.
  provider      String // 'notion', 'slack', etc.
  status        String @default("ACTIVE") // 'ACTIVE', 'DISABLED', 'ERROR'
  syncDirection String // 'push', 'pull', 'bidirectional'
  syncFrequency String // 'manual', 'hourly', 'daily', 'weekly'

  // Configuration specific to the workflow type
  config Json // JSON blob for flexible configuration (database ID, field mappings, etc.)

  // Relationships
  integrationId String
  userId        String
  projectId     String? // Optional: associate with a specific project

  // Timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  lastRunAt DateTime? // When the workflow was last executed

  // Relations
  integration Integration   @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?      @relation(fields: [projectId], references: [id], onDelete: SetNull)
  runs        WorkflowRun[]

  @@index([userId])
  @@index([integrationId])
  @@index([status])
  @@index([provider])
}

model WorkflowRun {
  id          String    @id @default(cuid())
  workflowId  String
  status      String // 'RUNNING', 'SUCCESS', 'FAILED'
  startedAt   DateTime  @default(now())
  completedAt DateTime?

  // Results and metadata
  itemsProcessed Int     @default(0)
  itemsCreated   Int     @default(0)
  itemsUpdated   Int     @default(0)
  itemsSkipped   Int     @default(0)
  errorMessage   String?
  metadata       Json? // Additional data about the run

  // Relations
  workflow Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
}

model SlackChannelConfig {
  id           String  @id @default(cuid())
  slackChannel String // #channel-name or channel ID
  isActive     Boolean @default(true)

  // Relations - only one should be set
  projectId String? @unique
  teamId    String? @unique

  // Integration link
  integrationId String

  // Track who configured this channel (for audit purposes)
  configuredByUserId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  team         Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  integration  Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  configuredBy User        @relation(fields: [configuredByUserId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([teamId])
  @@index([integrationId])
  @@index([configuredByUserId])
}

model IntegrationPermission {
  id String @id @default(cuid())

  // Integration being shared
  integrationId String

  // Who is being granted access
  grantedToUserId String? // Individual user access
  grantedToTeamId String? // Team-wide access (all team members get access)

  // Who granted this permission
  grantedByUserId String

  // Permission details
  permissions   String[] // ['CONFIGURE_CHANNELS', 'VIEW_INTEGRATION', 'USE_IN_WORKFLOWS']
  scope         String // 'global', 'team', 'project'
  scopeEntityId String? // projectId or teamId when scope is project/team-specific

  // Optional constraints
  expiresAt DateTime? // Permission expiration
  isActive  Boolean   @default(true)

  // Audit trail
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  revokedAt       DateTime?
  revokedByUserId String?

  // Relations
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  grantedToUser User?       @relation("PermissionGrantedTo", fields: [grantedToUserId], references: [id], onDelete: Cascade)
  grantedToTeam Team?       @relation(fields: [grantedToTeamId], references: [id], onDelete: Cascade)
  grantedBy     User        @relation("PermissionGrantedBy", fields: [grantedByUserId], references: [id], onDelete: Cascade)
  revokedBy     User?       @relation("PermissionRevokedBy", fields: [revokedByUserId], references: [id], onDelete: SetNull)

  // Note: Ensure either user or team is specified in application logic (not both)

  // Constraints
  @@index([integrationId])
  @@index([grantedToUserId])
  @@index([grantedToTeamId])
  @@index([grantedByUserId])
  @@index([scope, scopeEntityId])
}

model ActionSync {
  id         String   @id @default(cuid())
  actionId   String
  provider   String // 'notion', 'monday', 'asana', etc.
  externalId String // The ID in the external system (e.g., Notion page ID)
  syncedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt
  status     String   @default("synced") // 'synced', 'failed', 'needs_update'

  // Relations
  action Action @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([actionId, provider]) // One sync record per action per provider
  @@index([provider, externalId])
  @@index([provider])
  @@index([actionId])
}

model SlackRegistrationToken {
  id            String    @id @default(cuid())
  token         String    @unique // Secure random token for the registration link
  slackUserId   String // The Slack user ID trying to register (U1234567890)
  integrationId String // Which Slack integration this is for
  teamId        String? // Optional: limit to specific team
  createdAt     DateTime  @default(now())
  expiresAt     DateTime // Token expiration (24 hours)
  usedAt        DateTime? // When the token was used (null = not used yet)
  usedByUserId  String? // Which system user completed the registration

  // Relations
  integration Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  team        Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  usedByUser  User?       @relation(fields: [usedByUserId], references: [id], onDelete: SetNull)

  @@index([token])
  @@index([slackUserId])
  @@index([integrationId])
  @@index([expiresAt])
}

model SlackEvent {
  id          String   @id @default(cuid())
  eventKey    String   @unique // Event ID or content-based key for deduplication
  processedAt DateTime @default(now()) // When this event was processed

  @@index([eventKey])
  @@index([processedAt])
}

model SlackMessageHistory {
  id String @id @default(cuid())

  // Message Metadata
  slackEventId String? // Original Slack event ID
  channelId    String // Slack channel ID
  channelType  String // "DM", "channel", "group"
  timestamp    String // Slack timestamp (ts field)

  // User Context
  slackUserId  String // Slack user ID
  systemUserId String? // Your system user ID (if authenticated)
  userName     String? // Display name for quick reference

  // Message Content & Intent
  rawMessage   String // Original message text
  cleanMessage String // Message with @mentions stripped
  messageType  String? // "question", "command", "request", etc.

  // AI Response Context
  agentUsed    String? // Which Mastra agent handled it
  responseTime Int? // How long AI took to respond (ms)
  hadError     Boolean @default(false)
  errorMessage String? // Error details if any

  // Feature Categorization (for prioritization)
  category String? // "goals", "projects", "actions", "general"
  intent   String? // "list_goals", "create_task", "status_check"

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [systemUserId], references: [id], onDelete: SetNull)

  @@index([slackUserId])
  @@index([systemUserId])
  @@index([category])
  @@index([intent])
  @@index([createdAt])
  @@index([channelType])
  @@index([messageType])
}

model AiInteractionHistory {
  id String @id @default(cuid())

  // Source Information (Platform-agnostic)
  platform String // "slack", "manychat", "api", "webhook", "direct"
  sourceId String? // Platform-specific ID (Slack channel, chat session, etc.)

  // User Context
  systemUserId   String? // Authenticated user ID
  externalUserId String? // Platform-specific user ID (Slack user, etc.)
  userName       String? // Display name for quick reference

  // Message Content
  userMessage  String // Original user input
  cleanMessage String? // Processed/cleaned message
  aiResponse   String // AI agent response

  // AI Context
  agentId   String? // Mastra agent ID
  agentName String? // Human-readable agent name
  model     String? // AI model used (GPT-4, Claude, etc.)

  // Interaction Metadata
  conversationId String? // Group related messages
  messageType    String? // "question", "command", "request", "followup"
  intent         String? // Classified intent ("list_goals", "create_task", etc.)
  category       String? // "goals", "projects", "actions", "general"

  // Performance & Quality
  responseTime    Int? // Response time in ms
  tokenUsage      Json? // Token consumption details {prompt: 100, completion: 50, total: 150}
  hadError        Boolean @default(false)
  errorMessage    String? // Error details if any
  confidenceScore Float? // AI confidence rating (0.0 to 1.0)

  // Context & Results
  projectId    String? // Associated project
  actionsTaken Json? // Actions performed by AI [{action: "create_task", result: "success"}]
  toolsUsed    String[] // Tools/functions called ["createAction", "retrieveActions"]

  // Additional metadata
  userAgent String? // Browser/client information
  ipAddress String? // For security/analytics (hashed)

  // Timestamps
  createdAt DateTime @default(now())

  // Relations
  user    User?    @relation(fields: [systemUserId], references: [id], onDelete: SetNull)
  project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

  // Indexes for common queries
  @@index([systemUserId])
  @@index([platform])
  @@index([agentId])
  @@index([conversationId])
  @@index([category])
  @@index([intent])
  @@index([projectId])
  @@index([createdAt])
  @@index([platform, systemUserId])
  @@index([conversationId, createdAt])
}

model WhatsAppConfig {
  id                  String      @id @default(cuid())
  phoneNumberId       String      // WhatsApp phone number ID
  businessAccountId   String      // WhatsApp Business Account ID
  webhookVerifyToken  String      // Token for webhook verification
  displayPhoneNumber  String?     // Human-readable phone number
  businessName        String?     // Business display name
  
  // Link to the generic Integration model
  integrationId       String      @unique
  integration         Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  // Message templates for this WhatsApp account
  templates           WhatsAppTemplate[]
  
  // Conversations for this WhatsApp account
  conversations       WhatsAppConversation[]
  
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  @@index([integrationId])
}

model WhatsAppTemplate {
  id                  String           @id @default(cuid())
  name                String           // Template name as registered with WhatsApp
  language            String           // Template language code (e.g., "en_US")
  status              String           // "APPROVED", "PENDING", "REJECTED"
  category            String           // "UTILITY", "MARKETING", "AUTHENTICATION"
  
  // Template content
  headerType          String?          // "TEXT", "IMAGE", "VIDEO", "DOCUMENT"
  headerText          String?          // Header text if headerType is TEXT
  bodyText            String           // Main message body with variables {{1}}, {{2}}, etc.
  footerText          String?          // Optional footer text
  
  // Button configuration (stored as JSON for flexibility)
  buttons             Json?            // Array of button objects
  
  // WhatsApp metadata
  whatsappTemplateId  String?          // ID assigned by WhatsApp
  rejectionReason     String?          // Reason if template was rejected
  
  // Link to WhatsApp config
  whatsappConfigId    String
  whatsappConfig      WhatsAppConfig   @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)
  
  // Usage tracking
  usageMetrics        WhatsAppTemplateUsage[]
  
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  @@unique([whatsappConfigId, name])
  @@index([whatsappConfigId])
  @@index([status])
}

model WhatsAppConversation {
  id                  String           @id @default(cuid())
  phoneNumber         String           // WhatsApp phone number (external user ID)
  userId              String?          // Optional: linked user ID
  user                User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  // Conversation data
  messages            Json             // Array of conversation messages
  lastMessageAt       DateTime         @default(now())
  messageCount        Int              @default(0)
  
  // Link to WhatsApp config
  whatsappConfigId    String
  whatsappConfig      WhatsAppConfig   @relation(fields: [whatsappConfigId], references: [id], onDelete: Cascade)
  
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  @@unique([phoneNumber, whatsappConfigId])
  @@index([phoneNumber])
  @@index([userId])
  @@index([lastMessageAt])
}

model NotificationPreference {
  id                  String           @id @default(cuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Integration settings
  integrationId       String?          // Optional: specific integration to use
  integration         Integration?     @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  
  // Notification types
  taskReminders       Boolean          @default(true)
  projectUpdates      Boolean          @default(true)
  dailySummary        Boolean          @default(true)
  weeklySummary       Boolean          @default(false)
  
  // Timing preferences
  timezone            String           @default("UTC")
  dailySummaryTime    String?          @default("09:00") // HH:mm format
  weeklyDayOfWeek     Int?             @default(1) // 1 = Monday, 7 = Sunday
  
  // Task reminder settings
  reminderMinutesBefore Int[]          @default([15, 60, 1440]) // 15 min, 1 hour, 1 day
  
  // Quiet hours
  quietHoursEnabled   Boolean          @default(false)
  quietHoursStart     String?          // HH:mm format
  quietHoursEnd       String?          // HH:mm format
  
  // Metadata
  enabled             Boolean          @default(true)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  @@unique([userId])
  @@index([userId])
  @@index([enabled])
}

model ScheduledNotification {
  id                  String           @id @default(cuid())
  userId              String
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification details
  type                String           // "task_reminder", "project_update", "daily_summary", "weekly_summary"
  status              String           @default("pending") // "pending", "sent", "failed", "cancelled"
  
  // Scheduling
  scheduledFor        DateTime         // When to send the notification
  sentAt              DateTime?        // When it was actually sent
  
  // Content
  title               String
  message             String
  metadata            Json?            // Additional data (taskId, projectId, etc.)
  
  // Delivery
  integrationId       String?          // Which integration to use
  integration         Integration?     @relation(fields: [integrationId], references: [id], onDelete: SetNull)
  recipientPhone      String?          // WhatsApp phone number
  
  // Error tracking
  attempts            Int              @default(0)
  lastError           String?
  
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  
  @@index([userId])
  @@index([scheduledFor])
  @@index([status])
  @@index([type])
  @@index([userId, scheduledFor])
}

model WhatsAppTemplateUsage {
  id                  String           @id @default(cuid())
  templateId          String
  template            WhatsAppTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  // Usage tracking
  usedAt              DateTime         @default(now())
  usedBy              String?          // User ID who triggered the usage
  recipientPhone      String           // Phone number message was sent to
  messageId           String?          // WhatsApp message ID
  
  // Performance metrics
  delivered           Boolean          @default(false)
  read                Boolean          @default(false)
  deliveredAt         DateTime?
  readAt              DateTime?
  
  // Variables used
  variables           Json?            // Variables substituted in the template
  
  // Status
  status              String           @default("sent") // "sent", "delivered", "read", "failed"
  errorMessage        String?
  
  createdAt           DateTime         @default(now())
  
  @@index([templateId])
  @@index([usedAt])
  @@index([status])
}
