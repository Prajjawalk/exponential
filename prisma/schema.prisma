// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    projects      Project[]
    actions       Action[]
    videos        Video[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Action {
    id              String   @id @default(cuid())
    name            String
    description     String?
    dueDate         DateTime?
    status          String   @default("ACTIVE")
    priority        String   @default("Quick")
    project         Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId       String?
    createdBy       User     @relation(fields: [createdById], references: [id])
    createdById     String

    @@index([projectId])
    @@index([createdById])
}

model Outcome {
    id          String   @id @default(cuid())
    description String
    project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId   String

    @@index([projectId])
}

model Project {
    id              String    @id @default(cuid())
    name            String
    slug            String   @unique
    status          String    @default("ACTIVE")
    priority        String    @default("NONE")
    progress        Float     @default(0)
    
    // Dates
    createdAt       DateTime    @default(now())
    reviewDate      DateTime?
    nextActionDate  DateTime?
    
    // Text fields
    actions         Action[]
    outcomes        Outcome[]
    
    // User relation (same as your existing Post model)
    createdBy       User        @relation(fields: [createdById], references: [id])
    createdById     String

    @@index([name])
    @@index([status])
    @@index([priority])
}

model Video {
  id            String   @id @default(uuid())
  slug          String?
  title         String?
  videoUrl      String
  transcription String?
  status        String
  createdAt     DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime?    @default(now()) @updatedAt @db.Timestamptz(6)
  userId        String
  isSearchable  Boolean?     @default(false)
  user          User         @relation(fields: [userId], references: [id])
  VideoChunk    VideoChunk[]
}

model VideoChunk {
  id              Int                    @id @default(autoincrement())
  video_id        String?
  chunk_text      String
  //chunk_embedding Unsupported("vector(1536)") @map("chunk_embedding") // OpenAI embeddings are 1536 dimensions
  chunk_start     Int?                   // character position start
  chunk_end       Int?                   // character position end
  chunk_start_time Float?                // timestamp in seconds
  chunk_end_time   Float?                // timestamp in seconds
  created_at      DateTime?              @default(now()) @db.Timestamptz(6)
  Video           Video?                 @relation(fields: [video_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  //@@index([chunk_embedding(type: Vector)]) // For pgvector
}
